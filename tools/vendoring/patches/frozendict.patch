diff --git b/conda/_vendor/frozendict/__init__.py a/conda/_vendor/frozendict/__init__.py
index 399948a61..7237f62f1 100644
--- b/conda/_vendor/frozendict/__init__.py
+++ a/conda/_vendor/frozendict/__init__.py
@@ -1,8 +1,4 @@
-import collections
-import operator
-import functools
-import sys
-
+from collections.abc import Mapping
 
 try:
     from collections import OrderedDict
@@ -13,7 +9,7 @@ except ImportError:  # python < 2.7
 iteritems = getattr(dict, 'iteritems', dict.items) # py2-3 compatibility
 
 
-class frozendict(collections.Mapping):
+class frozendict(Mapping):
     """
     An immutable wrapper around dictionaries that implements the complete :py:class:`collections.Mapping`
     interface. It can be used as a drop-in replacement for dictionaries where immutability is desired.
@@ -51,6 +47,13 @@ class frozendict(collections.Mapping):
             self._hash = h
         return self._hash
 
+    def __json__(self):
+        # Works with auxlib's EntityEncoder.
+        return self._dict
+
+    def to_json(self):
+        return self.__json__()
+
 
 class FrozenOrderedDict(frozendict):
     """
